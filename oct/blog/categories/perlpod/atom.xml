<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: perlpod | 小默的研究中心]]></title>
  <link href="http://wangxiaomo.github.com/blog/categories/perlpod/atom.xml" rel="self"/>
  <link href="http://wangxiaomo.github.com/"/>
  <updated>2012-06-12T21:30:43+08:00</updated>
  <id>http://wangxiaomo.github.com/</id>
  <author>
    <name><![CDATA[wangxiaomo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[perldoc]perlpod]]></title>
    <link href="http://wangxiaomo.github.com/blog/2012/01/08/%5Bperldoc%5Dperlpod/"/>
    <updated>2012-01-08T05:11:00+08:00</updated>
    <id>http://wangxiaomo.github.com/blog/2012/01/08/[perldoc]perlpod</id>
    <content type="html"><![CDATA[<pre lang="perl">

        *****************************************************
        *           GENERATED FILE, DO NOT EDIT             * 
        * THIS IS NO SOURCE FILE, BUT RESULT OF COMPILATION *
        *****************************************************

This file was generated by po4a(7). Do not store it (in VCS, for example),
but store the PO file used as source file by po4a-translate. 

In fact, consider this as a binary, and the PO file as a regular .c file:
If the PO get lost, keeping this translation up-to-date will be harder.

=encoding utf8

=for comment This document is in Pod format.  To read this, use a Pod formatter,
like "perldoc perlpod".

=head1 NAME X<POD> X<plain old documentation>

perlpod - POD 介绍

=head1 DESCRIPTION

Pod 是一种方便为 Perl、Perl 程序、Perl
模块书写文档的一种标记型语言。

它能很方便的转化为 text，HTML，man pages 等其它格式。

Pod 有三个基本类型的段落组成：L<ordinary|/"Ordinary
Paragraph">，L<verbatim|/"Verbatim Paragraph">，L<command|/"Command
Paragraph">。



=head2 Ordinary Paragraph X<POD, ordinary paragraph>

Pod
中大部分的段落属于普通的文本块。你可以简单的将你的文字不加任何标记的输入到这种段落中，当该段文字格式化输出时，文档会自动调整到合适的格式。

你也可以在 ordinary paragraphs
中使用如下标记符号：B<bold>，I<italic>，C<code-style>，L<hyperlinks|perlfaq>等等。这些格式化符号将会在
"L<Formatting Codes|/"Formatting Codes"> 中介绍。



=head2 Verbatim Paragraph X<POD, verbatim paragraph> X<verbatim>

Verbatim paragraphs
一般用来放置代码块，或是一些不需要格式化输出的文字。

verbatim paragraph
中每行第一个字符默认为空格或者制表符。其中制表符为8空格制表符。verbatim
paragraph 中没有特殊的转移符号，\ 就是 \
的意思，并没有其它含义。



=head2 Command Paragraph X<POD, command>

command paragraph
通常用来标识整块文本，所以一般用来放置标题或列表。

command paragraphs 默认以 "=" 开头。

    =pod
    =head1 Heading Text
    =head2 Heading Text
    =head3 Heading Text
    =head4 Heading Text
    =over identifier
    =item stuff
    =back    =begin format
    =end format
    =for format text...
    =encoding type
    =cut

下面详细的来介绍他们：

=over 

=item C<=head1 I<Heading Text>> X<=head1> X<=head2> X<=head3> X<=head4> X<head1>
X<head2> X<head3> X<head4>

=item C<=head2 I<Heading Text>>

=item C<=head3 I<Heading Text>>

=item C<=head4 I<Heading Text>>

Head1 到 Head4 用来制作标题，head1 等级最高。在 head
之后文字即为相应的标题。比如：

  =head2 Object Attributes

"Object Attributes" 为相应的标题。（需要注意的是 head3、head4
是最近被加入的，在一些旧版的 pod
解释器中可能无法使用。）标题中可以使用特殊的格式符号来格式化输出：

  =head2 Possible Values for C<$/>

格式化符号将在 "L<Formatting Codes|/"Formatting Codes"> 中讲述。

=item C<=over I<indentlevel>> X<=over> X<=item> X<=back> X<over> X<item> X<back>

=item C<=item I<stuff...>>

=item C<=back>

Item，over，和 back 需要在这里解释下："=over"
指定缩进级别，之后经常用来放置 "=item"
或者一段需要特殊缩进的文字。另外在 item
的最后，需要用 "=back" 来结束。over
之后跟缩进级别，默认下是4空格。在 item
中你可以用格式化符号来格式化输出，如：

  =item Using C<$|> to Control Buffering

格式化符号将在 "L<Formatting Codes|/"Formatting Codes"> 中讲述。

"=over" ... "=back" 也有一些简单的规则：

=over 

=item *

"=item" 不要用在 "=over" ... 和 "=back" 外面。

=item *

在 "=over" 之后应该是一个 "=item"，尽管没有 item 存在在
"=over" ... "=back" 中间。

=item *

"=headI<n>" 不要放在 "=over" ... 和 "=back" 中间。

=item *

更重要的是，要保持项目一致：不要用 "=item *"，而是用
"=item 1."，"=item 2."，等。或者用 "=item foo"，"=item bar"等。

如果你使用符号或编号来定义
item，那么请坚持这么做，pod 解释器会根据第一个 "=item"
的类型来决定如何输出这个列表。

=back

=item C<=cut> X<=cut> X<cut>

使用空行，"=cut"，空行的形式来结束一个 pod 块。

=item C<=pod> X<=pod> X<pod>

"=pod" 不做任何事情，它只是一个 pod
的标记，一般用来标记你的 pod 从何处开始。

  =item stuff()

  this function does stuff.

  =cut

  sub stuff {
    ...
  }

  =pod

  Remember to check its return value, as in:

    stuff() || die "Couldn't do stuff!";

  =cut

=item C<=begin I<formatname>> X<=begin> X<=end> X<=for> X<begin> X<end> X<for>

=item C<=end I<formatname>>

=item C<=for I<formatname> I<text...>>

For，begin，end 可以使你传递特定的 formatter
来解释输出得到 text/code/data。

"=begin I<formatname>" 到 "=end I<formatname>" 中间的内容将有
I<formatname> 来解释输出。

  =begin html

  <hr> <img src="thang.png">
  <p> This is a raw HTML paragraph </p>

  =end html

"=for I<formatname> I<text...>" 指明只有 text 会被 formatname
来解释输出，不会影响 pod 的其他部分。

  =for html <hr> <img src="thang.png">
  <p> This is a raw HTML paragraph </p>

This means the same thing as the above "=begin html" ... "=end html" region.

That is, with "=for", you can have only one paragraph's worth of text (i.e.,
the text in "=foo targetname text..."), but with "=begin targetname"
... "=end targetname", you can have any amount of stuff inbetween.  (Note
that there still must be a blank line after the "=begin" command and a blank
line before the "=end" command.

这里有几个简单的例子：

  =begin html

  <br>Figure 1.<br><IMG SRC="figure1.png"><br>

  =end html

  =begin text

    ---------------
    |  foo        |
    |        bar  |
    ---------------

  ^^^^ Figure 1. ^^^^

  =end text

一些常用的 formatter
有："roff"，"man"，"latex"，"tex"，"text"，"html" 等。

"comment" formatter 是注释，将不会出现在解释后的 pod 中。

  =for comment
  Make sure that all the available options are documented!

有些 formatter 需要前导冒号。如，"=begin :formatname" ... "=end
:formatname"。

=item C<=encoding I<encodingname>> X<=encoding> X<encoding>

这个命令用来指明 pod 的编码格式。

  =encoding utf8

  =encoding koi8-r
  
  =encoding ShiftJIS
  
  =encoding big5

=back

C<=endoing> 影响整个文档，所以只声明一次就可以了。

还有需要注意的是，一个命令作用在它的段落，而不是某一行。在后面的例子中，你可以看到每个段落中间都有空行来标识。

一些例子：

  =over

  =item *

  First item

  =item *

  Second item

  =back

  =over

  =item Foo()

  Description of Foo function

  =item Bar()

  Description of Bar function

  =back



=head2 Formatting Codes X<POD, formatting code> X<formatting code> X<POD, interior
sequence> X<interior sequence>

有很多格式化符号可以用在 ordinary paragraphs 或 command
paragraphs 中。

=for comment "interior sequences" is such an opaque term.  Prefer "formatting
codes" instead.

=over 

=item C<IE<lt>textE<gt>> -- italic text X<I> X<< IZ<><> >> X<POD, formatting code,
italic> X<italic>

用于语句中的强调（"C<be
IE<lt>careful!E<gt>>"）或是表示参数（"C<redo IE<lt>LABELE<gt>>"）

=item C<BE<lt>textE<gt>> -- bold text X<B> X<< BZ<><> >> X<POD, formatting code,
bold> X<bold>

用在命令中的选项（"C<perl's BE<lt>-nE<gt>
switch>"），语句中的强调（"C<some systems provide a BE<lt>chfnE<gt>
for that>"），（"C<and that feature is known as
BE<lt>autovivificationE<ft>>"）。

=item C<CE<lt>codeE<gt>> -- code text X<C> X<< CZ<><> >> X<POD, formatting code,
code> X<code>

用在表示代码的文本（"C<CE<lt>gmtime($^T)E<gt>>"），或是表示代码的输出结果（"C<CE<lt>drwxr-xr-xE<gt>>"）。

=item C<LE<lt>nameE<gt>> -- a hyperlink X<L> X<< LZ<><> >> X<POD, formatting code,
hyperlink> X<hyperlink>

这个命令有很多用法。这条命令中的
C<text>，C<name>，C<section> 中不能出现 '/' 和 '|'，而且 '<' 和
'>' 需要成对出现。

=over 

=item *

C<LE<lt>nameE<gt>>

链接到 Perl manual page（如: C<LE<lt>Net::PingE<gt>>）。C<name>
中不能包含空格。这个命令也可以链接到 Unix man pages，如
C<LE<lt>crontab(5)E<gt>>。

=item *

C<LE<lt>name/"sec"E<gt>> 或 C<LE<lt>name/secE<gt>>

链接到文档的某章节，如 C<LE<lt>perlsyn/"For Loops"E<gt>>。

=item *

C<LE<lt>/"sec"E<gt>> 或 C<LE<lt>/secE<gt>>

链接到本文档的某章节，如 C<LE<lt>/"Object Methods"E<gt>>。

=back

pod 中的章节是由 head 或 item 来指定的。比如，
C<LE<lt>perlvar/$.E<gt>> 或 C<LE<lt>perlvar/"$."E<gt>> 都会链接到
perlvar 中的 "C<=item $.>"上。C<LE<lt>perlsyn/For LoopsE<gt>> 或
C<LE<lt>perlsyn/"For Loops"E<gt>> 都会链接到 perlsyn 中的 "C<=head2
For Loops>" 上。

要想控制显示什么内容，可以通过 "C<LE<lt>text|...E<gt>>"
来实现。

=over 

=item *

C<LE<lt>text|nameE<gt>>

链接到某文档，如 C<LE<lt>Perl Error Messages|perldiagE<gt>>。

=item *

C<LE<lt>text|name/"sec"E<gt>> 或 C<LE<lt>text|name/secE<gt>>

链接到文档的某一章节，如 C<LE<lt>postfix "if"|perlsyn/"Statement
Modifiers"E<gt>>。

=item *

C<LE<lt>text|/"sec"E<gt>>，C<LE<lt>text|/secE<gt>> 或
C<LE<lt>text|"sec"E<gt>>

链接到本文档的某一章节，如 C<LE<lt>the various
attributes|/"Member Data"E<gt>>。

=back

或者你也可以链接到一个网页：

=over 

=item *

C<LE<lt>scheme:...E<gt>>

C<LE<lt>text|scheme:...E<gt>>

链接到一个网页的绝对地址。如，C<LE<lt>http://www.perl.org/E<gt>>
或 C<LE<lt>The Perl Home Page|http://www.perl.org/E<gt>>。

=back

=item C<EE<lt>escapeE<gt>> -- a character escape X<E> X<< EZ<><> >> X<POD,
formatting code, escape> X<escape>

和 HTML/XML 中的转义十分相似。

=over 

=item *

C<EE<lt>ltE<gt>> -- < (less than)

=item *

C<EE<lt>gtE<gt>> -- > (greater than)

=item *

C<EE<lt>verbarE<gt>> -- | (I<ver>tical I<bar>)

=item *

C<EE<lt>solE<gt>> = a literal / (I<sol>idus)

The above four are optional except in other formatting codes, notably
C<LE<lt>...E<gt>>, and when preceded by a capital letter.

=item *

C<EE<lt>htmlnameE<gt>>

用于一些非数字的 HTML 标记。

=item *

C<EE<lt>numberE<gt>>

"0x" 表示十六进制数，"0" 表示为八进制数。

旧的 pod 解释器可能无法识别八进制数和十六进制数。

=back

=item C<FE<lt>filenameE<gt>> -- 表示文件名 X<F> X<< FZ<><> >> X<POD,
formatting code, filename> X<filename>

通常用斜体表示，如 "C<FE<lt>.cshrcE<gt>>"。

=item C<SE<lt>textE<gt>> -- 不断行的文本 X<S> X<< SZ<><> >> X<POD,
formatting code, non-breaking space> X<non-breaking space>

如：S<C<SE<lt>$x ? $y : $zE<gt>>>。

=item C<XE<lt>topic nameE<gt>> -- 索引条目 X<X> X<< XZ<><> >> X<POD,
formatting code, index entry> X<index entry>

有些解释器会忽略它，不过有的会用它来建立索引条目。它总是呈现为空字符串，如
C<XE<lt>absolutizing relative URLsE<gt>>。

=item C<ZE<lt>E<gt>> -- 空格式化代码 X<Z> X<< ZZ<><> >> X<POD, formatting
code, null> X<null>

这个不经常用到。如： "NE<lt>3" 可以用 "NZE<lt>E<gt>E<lt>3>"
来表示。

=for comment This was formerly explained as a "zero-width character".  But it in
most parser models, it parses to nothing at all, as opposed to parsing as if
it were a E<zwnj> or E<zwj>, which are REAL zero-width characters.  So
"width" and "character" are exactly the wrong words.

=back

大部分时候当你需要使用 '<' 或 '>' 的时候，你需要使用
C<E> 来转义输出。

    C<$a E<lt>=E<gt> $b>

这将会得到："C<$a E<lt>=E<gt> $b>"。

一种更加友好的方式就是使用 '<<' 或 '>>'
来进行输出，这样里面的 '<' 和 '>' 就不需要进行转义了。

    C<< $a <=> $b >>

实际上，你可以用任意数量的反复尖括号，只要保证与内容有空格间隔即可。

    C<<< $a <=> $b >>>
    C<<<<  $a <=> $b     >>>>

它们都表示一个意思。

    C<$a E<lt>=E<gt> $b>

The multiple-bracket form does not affect the interpretation of the contents
of the formatting code, only how it must end.  That means that the examples
above are also exactly the same as this:

    C<< $a E<lt>=E<gt> $b >>

另外一个用法就是当你想得到 C<C> (code style) 的时候

    open(X, ">>thing.dat") || die $!
    $foo->bar();

你可以这样写：

    C<<< open(X, ">>thing.dat") || die $! >>>
    C<< $foo->bar(); >>

这比旧方法更容易被阅读。旧方法书写如下：

    C<open(X, "E<gt>E<gt>thing.dat") || die $!>
    C<$foo-E<gt>bar();>

这个功能目前被 pod2text（Pod::Text)，pod2man（Pod::Man），或
pod2xxx or Pod:Xxxx等使用 Pod::Parser 1.093 、 Pod::Tree 1.02
以后的解释器所支持。

=head2 The Intent X<POD, intent of>

Pod 的目的是使用，而不贪图一些华而不实的功能。

The Pod format is not necessarily sufficient for writing a book.  Pod is
just meant to be an idiot-proof common source for nroff, HTML, TeX, and
other markup languages, as used for online documentation.  Translators exist
for B<pod2text>, B<pod2html>, B<pod2man> (that's for nroff(1) and troff(1)),
B<pod2latex>, and B<pod2fm>.  Various others are available in CPAN.



=head2 Embedding Pods in Perl Modules X<POD, embedding>

你可以在脚本中内嵌入 Pod
文档。如果想要在脚本的结束加入 pod，你可以使用 __END__
或 __DATA__ 来标记，记得要在 pod
与上面的标记中间加入空行。

  __END__

  =head1 NAME

  Time::Local - efficiently compute time from local and GMT time

如果在标记与 "=head1"
中间没有空行分割的话，许多解释器将无法正确的识别。

=head2 提示

=over 

=item * X<podchecker> X<POD, validating>

B<podchecker> 命令会检查你的 pod
是否包含错误并给出适当的警告。

=item *

如果你对书写 HTML 比书写 pod
更加熟悉，你也可以通过书写简单的 HTML 并通过
L<Pod::HTML2Pod|Pod::HTML2Pod> 来转化成 Pod。

=item *

许多旧的解释器要求在每条命令的结尾都要有 "=cut"
命令。

 # - - - - - - - - - - - -
 =item $firecracker->boom()

 This noisily detonates the firecracker object.
 =cut
 sub boom {
 ...

... 将会使的 pod 解释器无法解释该文档。

你应该这样做：

 # - - - - - - - - - - - -

 =item $firecracker->boom()

 This noisily detonates the firecracker object.

 =cut

 sub boom {
 ...

=item *

旧的解释器需要有严格的空行分割。如果你没有做到的话，就不能正常解释输出。

=item *

Older translators might add wording around an LE<lt>E<gt> link, so that
C<LE<lt>Foo::BarE<gt>> may become "the Foo::Bar manpage", for example.  So
you shouldn't write things like C<the LE<lt>fooE<gt> documentation>, if you
want the translated document to read sensibly.  Instead, write C<the
LE<lt>Foo::Bar|Foo::BarE<gt> documentation> or C<LE<lt>the Foo::Bar
documentation|Foo::BarE<gt>>, to control how the link comes out.

=item *

Going past the 70th column in a verbatim block might be ungracefully wrapped
by some formatters.

=back

=head1 备注

查阅一下模块获得更多信息，L<perlpodspec>，L<perlsyn/"PODs:
Embedded
Documentation">，L<perlnewmod>，L<perldoc>，L<pod2html>，L<pod2man>，L<podchecker>。

=head1 作者

Larry Wall, Sean M. Burke译者：xiaomo(wxm4ever@gmail.com)

</pre>

]]></content>
  </entry>
  
</feed>
