<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: lisp | 小默的研究中心]]></title>
  <link href="http://wangxiaomo.github.com/blog/categories/lisp/atom.xml" rel="self"/>
  <link href="http://wangxiaomo.github.com/"/>
  <updated>2012-06-12T19:58:29+08:00</updated>
  <id>http://wangxiaomo.github.com/</id>
  <author>
    <name><![CDATA[wangxiaomo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lisp小窥]]></title>
    <link href="http://wangxiaomo.github.com/blog/2011/10/19/Lisp%E5%B0%8F%E7%AA%A5/"/>
    <updated>2011-10-19T11:46:00+08:00</updated>
    <id>http://wangxiaomo.github.com/blog/2011/10/19/Lisp小窥</id>
    <content type="html"><![CDATA[<p>最近是实验+考试周。没有大块的时间用来看算法方面的知识了。所以就找点时间看看其他的。在豆瓣上看到了<a href="http://www.douban.com/note/178148141/" target="_blank">http://www.douban.com/note/178148141/</a>感觉lisp写起来还是挺带感的。而且函数式编程据说对程序员的自身发展挺重要的。那我就看看吧。
学了一天之后才决定写文章的。所以之前看的那些东西就不在赘述了。现在开始读书笔记。
1.function return values</p>

<pre lang="lisp">
(defun foo(n)
  (return-from foo n))
</pre>


<p>2.循环.</p>

<pre lang="lisp">
(defun foo(i j step)
  (loop for x from i to j by step do
    (format t "Hello~%")))
</pre>


<p>3.let用法.</p>

<pre lang="lisp">
(defun foo(x)
  (format t "Parameter:~a~%" x)
  (let ((x 2))
    (format t "Outer LET:~a~%" x)
    (let ((x 3))
       (format t "Inner LET:~a~%" x))
    (format t "Outer LET:~a~%" x))
  (format t "Parameter:~a~%" x))
</pre>


<p>4.defvar和defparameter.</p>

<pre lang="lisp">
;defparameter 不管var是否存在.强制初始化.
;defvar 如果var存在.则不做任何改变.
(defparameter *count* 30)
(format t "~a%" *count*)
(defvar *count* 10)
(format t "~a%" *count*)
</pre>


<p>5.let优先于局部.defvar,defparameter定义普通变量.setq,setf直接修改内存.
..参考<a href="http://wiki.ubuntu.org.cn/Common_LISP_Hints">http://wiki.ubuntu.org.cn/Common_LISP_Hints</a>
其他的暂时不写了.学习这个感觉靠的还是感觉...</p>
]]></content>
  </entry>
  
</feed>
