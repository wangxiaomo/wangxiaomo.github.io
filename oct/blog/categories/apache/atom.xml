<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Apache | 小默的研究中心]]></title>
  <link href="http://wangxiaomo.github.com/blog/categories/apache/atom.xml" rel="self"/>
  <link href="http://wangxiaomo.github.com/"/>
  <updated>2012-06-12T21:30:43+08:00</updated>
  <id>http://wangxiaomo.github.com/</id>
  <author>
    <name><![CDATA[wangxiaomo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Apache 日志格式]]></title>
    <link href="http://wangxiaomo.github.com/blog/2011/05/17/Apache+%E6%97%A5%E5%BF%97%E6%A0%BC%E5%BC%8F/"/>
    <updated>2011-05-17T18:38:00+08:00</updated>
    <id>http://wangxiaomo.github.com/blog/2011/05/17/Apache 日志格式</id>
    <content type="html"><![CDATA[<p>今天看到django输出的日志格式挺清爽的.所以我也决定改改自己的apache日志...
首先.日志的设定和启用,应该是知道的..
在apache2.conf中设置LogFormat.然后在站点目录下CustomLog指定...</p>

<pre lang="bash">
LogFormat "%t %a %m %H %f %O" wxm
</pre>


<p>这个就是我设定的日志格式.输出如下.</p>

<pre lang="bash">
[18/May/2011:02:32:50 +0800] 127.0.0.1 GET HTTP/1.1 /var/www/test.php 355
[18/May/2011:02:32:53 +0800] 127.0.0.1 GET HTTP/1.1 /var/www/ 894
[18/May/2011:02:32:54 +0800] 127.0.0.1 GET HTTP/1.1 /var/www/cgi-bin/ 502
[18/May/2011:02:32:57 +0800] 127.0.0.1 GET HTTP/1.1 /var/www/karrigell/ 761
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache Rewrite转发.使支持Karrigell.]]></title>
    <link href="http://wangxiaomo.github.com/blog/2011/05/17/Apache+Rewrite%E8%BD%AC%E5%8F%91.%E4%BD%BF%E6%94%AF%E6%8C%81Karrigell./"/>
    <updated>2011-05-17T03:25:00+08:00</updated>
    <id>http://wangxiaomo.github.com/blog/2011/05/17/Apache Rewrite转发.使支持Karrigell.</id>
    <content type="html"><![CDATA[<p>额. 其实很不喜欢rewrite方式. 但是这个应用还是比较靠谱的. 研究了一天wsgi了, 一直不成功... 继续钻研吧. 不过先把rewrite方式写出来吧.</p>

<pre lang="bash">
# 在httpd.conf或者apache2.conf中
# 去掉LoadModule中的mod_proxy, mod_proxy_http, mod_rewrite
# 的注释.

# 添加重写规则.
RewriteEngine On
RewriteRule ^/(.*).py(.*) http://localhost:8080/$1.py$2 [L,P]
</pre>


<p>现在对上面做出一些解释.wsgi的形式虽然比较给力.但是这种方式却更加方便容易操作.
添加重写对服务器应用来说是一个很基础的能力.
RewriteRule是用Perl式正则写的.所以理解起来也不是问题.然后就是重写选项,L是忽略后面的重写规则,P是强制使用转发.
这时,我们重启服务器,然后打开Karrigell.py服务器.就OK了.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache CGI配置.]]></title>
    <link href="http://wangxiaomo.github.com/blog/2011/04/01/Apache+CGI%E9%85%8D%E7%BD%AE./"/>
    <updated>2011-04-01T08:49:00+08:00</updated>
    <id>http://wangxiaomo.github.com/blog/2011/04/01/Apache CGI配置.</id>
    <content type="html"><![CDATA[<p>昨晚看了下Perl Web编程.CGI也应该适当的学习下.知识.越多越好....
首先需要配置Apache来运行CGI程序.</p>

<pre lang="bash">
cd /etc/apache2/site-avalible
vi default
</pre>


<p>默认的CGI路径为</p>

<pre lang="bash">
ScriptAlias /cgi-bin/ /usr/lib/cgi-bin/
</pre>


<p>我们最好改变其路径为/var/www下.</p>

<pre lang="bash">
mkdir /var/www/cgi-bin -p
</pre>


<p>然后修改default文件.</p>

<pre lang="bash">
ScriptAlias /cgi-bin/ /var/www/cgi-bin/
AddHandler cgi-script cgi pl
</pre>


<p>需要注意的是.最好加上AddHandler不然会有很大的可能不能运行....不能运行事小.暴露了代码就不好了. ·</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache目录映射]]></title>
    <link href="http://wangxiaomo.github.com/blog/2011/03/25/Apache%E7%9B%AE%E5%BD%95%E6%98%A0%E5%B0%84/"/>
    <updated>2011-03-25T02:08:00+08:00</updated>
    <id>http://wangxiaomo.github.com/blog/2011/03/25/Apache目录映射</id>
    <content type="html"><![CDATA[<p>今天在实验室的台式机上重新搭建了下基本的服务.毕竟自己的笔记本还是不舍得当服务器一直开的.今天的服务配置的非常顺利.就是有个别细节我不是很懂.之前都没有仔细的研究过.
关于Apache的目录映射.之前一直以为是在sites-available里面增加配置文件.然后通过链接添加到sites-enabled中.但是今天安装phpmyadmin和torrentflux的时候发现没有关于这两个程序的配置文件.这就奇怪了.到底在哪呢?
我就谷歌了半天.最后发现应该是Apache的目录映射的原因.但是映射写在哪里了?</p>

<pre lang="bash">
which phpmyadmin
#无结果.
whereis phpmyadmin
#/etc/phpmyadmin /usr/share/phpmyadmin
</pre>


<p>不用说了./usr/share/phpmyadmin下肯定是phpmyadmin的网页路径.所以直接奔到/etc/phpmyadmin下.然后我发现了一个phpmyadmin.conf文件.打开一看是Apache配置格式.
所以.肯定在apache2.2中的某一位置引用了这个配置文件.所以又回去寻找.发现在conf.d中有这个配置文件的软链接.所以一切搞定.
接下来说下目录映射的写法.</p>

<pre lang="bash">
#假设别名为wp.虚拟路径为/usr/share/wordpress
Alias /wp /usr/share/wordpress
<Directory /usr/share/wordpress>
     Options Indexes FollowSymLinks
     AllowOverride None
     Order allow,deny
     Allow from all
</Directory>
</pre>


<p>搞定.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache在线离线模式.]]></title>
    <link href="http://wangxiaomo.github.com/blog/2011/03/25/Apache%E5%9C%A8%E7%BA%BF%E7%A6%BB%E7%BA%BF%E6%A8%A1%E5%BC%8F./"/>
    <updated>2011-03-25T00:53:00+08:00</updated>
    <id>http://wangxiaomo.github.com/blog/2011/03/25/Apache在线离线模式.</id>
    <content type="html"><![CDATA[<p>昨天在windows上又重新搭建了一个torrentflux.为了节约时间.使用的是wamp.一切搭建就绪后.发现网站只能本地访问.局域网是无法访问的.上网一查才知道wamp默认情况下是离线模式的.即只能本机访问.禁止局域网访问.为了安全?yes.
不管怎样.设置wamp为online模式.然后测试.不行.看来我还是自己手动改wamp/bin/apache/conf/httpd.conf吧.
在站点目录的配置文件中..有order allow,deny行.这里就是设置访问权限的...所以我们直接改这里..</p>

<pre lang="bash">
#默认情况下.
#order deny,allow
#deny from all
#allow from 127.0.0.1
#我们修改为.
#order allow,deny
#allow from all
</pre>


<p>这样就应该可以了.需要注意的是.网上说把deny from all改成deny from none.然后把allow from 127.0.0.1 改成allow from all.不该便order deny,allow的顺序.我试着做了下.不行.所以以后的时候多试几次吧...</p>
]]></content>
  </entry>
  
</feed>
